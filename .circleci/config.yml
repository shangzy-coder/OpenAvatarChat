# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

# Define parameters for flexible configuration
parameters:
  config_file:
    type: string
    default: "config/chat_with_openai_compatible_edge_tts.yaml"
  image_tag:
    type: string
    default: "latest"

# Define reusable commands
commands:
  setup_docker:
    description: "Setup Docker environment"
    steps:
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true

# Define jobs
jobs:
  build_and_export_docker:
    # Use machine executor for Docker support
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    
    parameters:
      config_file:
        type: string
        default: << pipeline.parameters.config_file >>
      image_tag:
        type: string
        default: << pipeline.parameters.image_tag >>
    
    steps:
      - checkout
      
      # Install dependencies
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install -y pv gzip
      
      # Build Docker image
      - run:
          name: "Build Docker Image"
          command: |
            echo "Building OpenAvatarChat Docker image..."
            echo "Using config file: << parameters.config_file >>"
            
            # Build the image
            docker build \
              --build-arg CONFIG_FILE=<< parameters.config_file >> \
              -f Dockerfile.circle \
              -t open-avatar-chat:<< parameters.image_tag >> \
              .
          no_output_timeout: 60m
      
      # Export Docker image
      - run:
          name: "Export Docker Image"
          command: |
            echo "Exporting Docker image..."
            mkdir -p /tmp/docker-export
            
            # Export image to tar file
            docker save open-avatar-chat:<< parameters.image_tag >> | pv > /tmp/docker-export/open-avatar-chat-<< parameters.image_tag >>.tar
            
            # Get image size info
            echo "Image size information:"
            docker images open-avatar-chat:<< parameters.image_tag >>
            
            # Get tar file size
            echo "Exported tar file size:"
            ls -lh /tmp/docker-export/open-avatar-chat-<< parameters.image_tag >>.tar
          no_output_timeout: 30m
      
      # Compress the exported image
      - run:
          name: "Compress Docker Image"
          command: |
            echo "Compressing Docker image..."
            cd /tmp/docker-export
            
            # Compress with gzip and show progress
            pv open-avatar-chat-<< parameters.image_tag >>.tar | gzip > open-avatar-chat-<< parameters.image_tag >>.tar.gz
            
            # Remove uncompressed file to save space
            rm open-avatar-chat-<< parameters.image_tag >>.tar
            
            # Show final file info
            echo "Final compressed file:"
            ls -lh open-avatar-chat-<< parameters.image_tag >>.tar.gz
            
            # Create checksum
            sha256sum open-avatar-chat-<< parameters.image_tag >>.tar.gz > open-avatar-chat-<< parameters.image_tag >>.tar.gz.sha256
            
            echo "Files ready for download:"
            ls -la
      
      # Create build info
      - run:
          name: "Create Build Info"
          command: |
            cd /tmp/docker-export
            
            # Create build information file
            cat > build-info.txt \<< EOF
            OpenAvatarChat Docker Image Build Information
            ============================================
            
            Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            Git Commit: $CIRCLE_SHA1
            Git Branch: $CIRCLE_BRANCH
            Config File: << parameters.config_file >>
            Image Tag: << parameters.image_tag >>
            CircleCI Build: $CIRCLE_BUILD_NUM
            CircleCI Job: $CIRCLE_JOB
            
            Files in this package:
            - open-avatar-chat-<< parameters.image_tag >>.tar.gz (Docker image)
            - open-avatar-chat-<< parameters.image_tag >>.tar.gz.sha256 (Checksum)
            - build-info.txt (This file)
            
            How to use:
            1. Download the .tar.gz file
            2. Verify checksum: sha256sum -c open-avatar-chat-<< parameters.image_tag >>.tar.gz.sha256
            3. Load image: gunzip -c open-avatar-chat-<< parameters.image_tag >>.tar.gz | docker load
            4. Run: docker run --rm --gpus all -it --name open-avatar-chat --network=host -p 8282:8282 open-avatar-chat:<< parameters.image_tag >> --config << parameters.config_file >>
            EOF
      
      # Store artifacts for download
      - store_artifacts:
          path: /tmp/docker-export
          destination: docker-images
      
      # Store test results if needed
      - store_test_results:
          path: /tmp/docker-export

  # Job for building different configurations
  build_multiple_configs:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    
    steps:
      - checkout
      
      # Install dependencies
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install -y pv gzip parallel
      
      # Build multiple configurations in parallel
      - run:
          name: "Build Multiple Configurations"
          command: |
            echo "Building multiple OpenAvatarChat configurations..."
            mkdir -p /tmp/docker-export
            
            # Define configurations to build
            declare -a configs=(
              "config/chat_with_openai_compatible_edge_tts.yaml:edge-tts"
              "config/chat_with_openai_compatible_bailian_cosyvoice.yaml:bailian"
              "config/chat_with_lam.yaml:lam"
            )
            
            # Function to build single config
            build_config() {
              local config_path=$1
              local tag_suffix=$2
              local image_tag="v$(date +%Y%m%d)-${tag_suffix}"
              
              echo "Building configuration: $config_path with tag: $image_tag"
              
              # Build image
              docker build \
                --build-arg CONFIG_FILE=$config_path \
                -f Dockerfile.circle \
                -t open-avatar-chat:$image_tag \
                .
              
              # Export and compress
              docker save open-avatar-chat:$image_tag | pv | gzip > /tmp/docker-export/open-avatar-chat-$image_tag.tar.gz
              
              # Create checksum
              cd /tmp/docker-export
              sha256sum open-avatar-chat-$image_tag.tar.gz > open-avatar-chat-$image_tag.tar.gz.sha256
              
              echo "Completed: $image_tag"
            }
            
            # Export function for parallel execution
            export -f build_config
            
            # Build configurations in parallel (limit to 2 concurrent builds to avoid resource issues)
            printf '%s\n' "${configs[@]}" | sed 's/:/ /' | parallel -j2 --colsep ' ' build_config {1} {2}
            
            # Create summary
            cd /tmp/docker-export
            echo "Build Summary:" > build-summary.txt
            echo "==============" >> build-summary.txt
            echo "Build Date: $(date -u)" >> build-summary.txt
            echo "Git Commit: $CIRCLE_SHA1" >> build-summary.txt
            echo "" >> build-summary.txt
            echo "Built Images:" >> build-summary.txt
            ls -lh *.tar.gz >> build-summary.txt
          no_output_timeout: 120m
      
      # Store artifacts
      - store_artifacts:
          path: /tmp/docker-export
          destination: multi-config-images

# Define workflows
workflows:
  # Manual build workflow
  manual_build:
    when:
      and:
        - equal: [ manual, << pipeline.trigger_source >> ]
    jobs:
      - build_and_export_docker:
          filters:
            branches:
              only: /.*/
  
  # Build on main branch push
  build_on_main:
    jobs:
      - build_and_export_docker:
          filters:
            branches:
              only: main
  
  # Build multiple configurations (manual trigger only)
  build_multiple:
    when:
      and:
        - equal: [ manual, << pipeline.trigger_source >> ]
    jobs:
      - build_multiple_configs:
          filters:
            branches:
              only: /.*/
