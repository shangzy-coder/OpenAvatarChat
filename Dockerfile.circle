FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04
LABEL authors="HumanAIGC-Engineering"

ARG CONFIG_FILE=config/chat_with_openai_compatible_edge_tts.yaml

ENV DEBIAN_FRONTEND=noninteractive

# Update package list and install required dependencies
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.11 python3.11-dev python3.11-venv python3.11-distutils python3-pip git git-lfs libgl1 libglib2.0-0 wget curl

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    python3.11 -m ensurepip --upgrade && \
    python3.11 -m pip install --upgrade pip

# Initialize git lfs
RUN git lfs install

ARG WORK_DIR=/root/open-avatar-chat
WORKDIR $WORK_DIR

# Clone the repository with submodules
RUN git clone https://github.com/HumanAIGC-Engineering/OpenAvatarChat.git . && \
    git submodule update --init --recursive --depth 1

# Install core dependencies (already available from git clone)
RUN pip install uv && \
    uv venv --python 3.11.11 && \
    uv sync --no-install-workspace

# Install ModelScope for model downloading
RUN pip install modelscope

# Download required models
RUN bash scripts/download_liteavatar_weights.sh

# Download LAM models
RUN git clone --depth 1 https://www.modelscope.cn/AI-ModelScope/wav2vec2-base-960h.git ./models/wav2vec2-base-960h && \
    mkdir -p ./models/LAM_audio2exp && \
    wget https://virutalbuy-public.oss-cn-hangzhou.aliyuncs.com/share/aigc3d/data/LAM/LAM_audio2exp_streaming.tar -P ./models/LAM_audio2exp/ && \
    tar -xzvf ./models/LAM_audio2exp/LAM_audio2exp_streaming.tar -C ./models/LAM_audio2exp && \
    rm ./models/LAM_audio2exp/LAM_audio2exp_streaming.tar

# Download MuseTalk models
RUN bash scripts/download_musetalk_weights.sh

# Execute pre-config installation script
RUN echo "Using config file: ${CONFIG_FILE}" && \
    chmod +x $WORK_DIR/scripts/pre_config_install.sh && \
    $WORK_DIR/scripts/pre_config_install.sh --config ${CONFIG_FILE}

# Install config dependencies
RUN uv run install.py \
    --config ${CONFIG_FILE} \
    --uv \
    --skip-core

# Execute post-config installation script
RUN chmod +x $WORK_DIR/scripts/post_config_install.sh && \
    $WORK_DIR/scripts/post_config_install.sh --config ${CONFIG_FILE}

# Create necessary directories if they don't exist
RUN mkdir -p ./resource ./ssl_certs

WORKDIR $WORK_DIR
ENTRYPOINT ["uv", "run", "src/demo.py"]
